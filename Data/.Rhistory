dplyr::relocate(RequestId,.before=1)
##Joining Grant Outcomes to Payments - Just as a test, may want to remove if output is too large
OutcomesMain<-PaymentsMaster%>%
left_join(GrantOutcomesOnly,by="RequestId")
##Code to add in assessments from grantee reports ommitted for now. Can be found in OutcomesNew if needed at a later date
## Compile Grantee DEI Information
PeopleImpacted<-ApplicationFields%>%
filter(str_detect(Name,"inoneshortparagraph,pleasedescribethedemographicsofthepeoplemostimpactedbyyourwork"))
Leadership<-ApplicationFields%>%
filter(str_detect(Name,"inoneshortparagraph,pleasedescribethedemographicsofyourboardandyourleadershipstaff"))
Alignment<-ApplicationFields%>%
filter(str_detect(Name,"howdoesthecompositionofyourboardandleadershipstaff"))
Inclusion<-ApplicationFields%>%
filter(str_detect(Name,"aretherespecificpracticesorinitiatives"))
PeopleImpactedResponses<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% PeopleImpacted$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(PeopleImpacted=paste(unique(LongText),collapse = ", "))
LeadershipResponses<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% Leadership$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(LeadershipStaff=paste(unique(LongText),collapse = ", "))
AlignmentResponses<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% Alignment$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(Alignment=paste(unique(LongText),collapse = ", "))
InclusionResponses<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% Inclusion$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(Inclusion=paste(unique(LongText),collapse = ", "))
GranteeDEI<-PaymentsMaster%>%
left_join(PeopleImpactedResponses, by="RequestId")%>%
left_join(LeadershipResponses, by="RequestId")%>%
left_join(AlignmentResponses, by="RequestId")%>%
left_join(InclusionResponses, by="RequestId")%>%
filter(!is.na(PeopleImpacted)|!is.na(LeadershipStaff)|!is.na(Alignment)|!is.na(Inclusion))%>%
group_by(RequestId, OrganizationId, ApprovalDate)%>%
summarise(ImpactedDem=cleanFun(paste(unique(PeopleImpacted),collapse=', ')),
StaffDem=cleanFun(paste(unique(LeadershipStaff),collapse=', ')),
Alignment=cleanFun(paste(unique(Alignment),collapse=', ')),
Inclusion=cleanFun(paste(unique(Inclusion),collapse=', ')))
##Contact Information
###Contacts
Users<-merge(x=Users,y=Emails, by.x="PrimaryEmailId", by.y="EmailId",all.x=TRUE)
masterforcontacts<-merge(x=PaymentsMaster,y=RequestHasContacts, by.x="RequestId", by.y="RequestId",all.x=TRUE)
masterforcontacts<-merge(x=masterforcontacts,y=Users, by.x="UserId", by.y="UserId",all.x=TRUE)
masterforcontacts<-merge(x=masterforcontacts,y=Users, by.x="PrimaryContactUserId", by.y="UserId",all.x=TRUE)
AllOrgs<-masterforcontacts %>%
filter(Status=="Approved") %>%
group_by(OrganizationId)%>%
summarise(contactId=max(PrimaryContactUserId),
OrgEnd=max(ProjectEndDate),
OrgStart=min(ProjectStartDate))
AllContacts<-left_join(masterforcontacts,AllOrgs,by="OrganizationId")
AllActiveContacts<-AllContacts%>%
group_by(RequestId,OrganizationId,Name,IrsSubsection ,ProjectTitle,Program,OrgStart,OrgEnd) %>%
summarise(Program=paste(unique(Program),collapse=", "),
GrantStart=first(ProjectStartDate),
GrantEnd=last(ProjectEndDate))
ProgramCount<-AllActiveContacts%>%
group_by(Program)%>%
count(Program)
AllContacts1<-AllActiveContacts%>%
left_join(ProgramCount)%>%
left_join(AllContacts, by="RequestId")%>%
filter(!is.na(Email.y.x))%>%
filter(Inactive.x==0)
MasterContacts<-AllContacts1%>%
group_by(Program.x,RequestId,Name.x,ProjectTitle.x,ProjectEndDate,Email.y.x,clean_name,Title.x,FullName.x,PrimaryContactUserId,OrgEnd.x)%>%
summarize(remove=sum(PrimaryEmailId.x))%>%
dplyr::select(-remove)%>%
#filter(Program!="MIG"&Program!="CI"&Program!="Member-Initiated Grants"&Program!="Second Generation Giving"&Program!="Perspective Fund"&Program!="SI"&Program!="NA")%>%
left_join(Users,by=c("PrimaryContactUserId"="UserId"))%>%
filter(Inactive==0)%>%
mutate(Type=ifelse(Email.y.x==Email.y,"Primary","Other"))%>%
ungroup()%>%
dplyr::select(-10,-12,-13,-14,-15,-16,-17)%>%
relocate(9, .after = 6)%>%
relocate(9, .after = 7)%>%
relocate(10, .after = 5)%>%
relocate(11, .after = 9)%>%
dplyr::rename("Program"=1,
"Organization"=3,
"ProjectTitle"=4,
"OrgEndDate"=6,
"Email"=7,
"Name"=8,
"Title"=9,
"PrimaryContactEmail"=10,
"Country"=11)
ContactPrograms<-MasterContacts%>%
group_by(Email)%>%
summarise(Requests=paste(unique(RequestId),collapse=', '),
Programs=paste(unique(Program),collapse=', '))
MasterContacts<-MasterContacts%>%
left_join(ContactPrograms)
##Write to Data and Reports Raw folder
# setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Raw")
# write.csv(master,"MainRequests.csv", row.names = FALSE)
# write.csv(PaymentsMaster,"MainPayments.csv", row.names = FALSE)
# write.csv(GrantOutcomesOnly,"GrantOutcomes.csv", row.names = FALSE)
#write.csv(OutcomesMain,"MainOutcomes.csv", row.names = FALSE)
### copy to SQL SERVER ###
loginfo("Ensuring that the Payments table exists...")
exists <- DBI::dbGetQuery(con, "SELECT object_id FROM sys.tables WHERE name = 'payments' AND SCHEMA_NAME(schema_id) = 'grants'")
# length(exists$object_id)
if (length(exists$object_id) == 0){
stop("Target grants table does not exist. Please create and re-run.")
} else {
options(odbc.batch_rows = 2048)
payments_table = Id(schema = "grants", table = "payments")
loginfo("Truncating payments table to retain indexes...")
DBI::dbSendQuery(con, "TRUNCATE TABLE grants.payments")
loginfo("Starting payments load...")
DBI::dbWriteTable(con, payments_table, PaymentsMaster, overwrite = TRUE)
loginfo("Done loading payments.")
}
loginfo("Ensuring that the requests table exists...")
exists <- DBI::dbGetQuery(con, "SELECT object_id FROM sys.tables WHERE name = 'requests' AND SCHEMA_NAME(schema_id) = 'grants'")
# length(exists$object_id)
if (length(exists$object_id) == 0){
stop("Target grants table does not exist. Please create and re-run.")
} else {
options(odbc.batch_rows = 2048)
requests_table = Id(schema = "grants", table = "requests")
loginfo("Truncating requests table to retain indexes...")
DBI::dbSendQuery(con, "TRUNCATE TABLE grants.requests")
loginfo("Starting requests load...")
DBI::dbWriteTable(con, requests_table, master, append = TRUE)
loginfo("Done loading requests.")
}
#
loginfo("Connecting to Microsoft Office 365")
team <- get_team("Data and Reports")
chan <- team$get_channel("General")
#
#
##Write Direct to Sharepoint Data and Reports Site/Folder
loginfo("Writing mainRequests CSV locally...")
write.csv(master,"MainRequests.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("MainRequests.csv", "Raw/MainRequests.csv")
loginfo("Deleting local file...")
unlink("MainRequests.csv")
loginfo("Deleted local MainRequests.csv.")
chan$send_message("Updated MainRequests.csv")
loginfo("Writing mainPayments CSV locally...")
write.csv(PaymentsMaster,"MainPayments.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("MainPayments.csv", "Raw/MainPayments.csv")
loginfo("Deleting local file...")
unlink("MainPayments.csv")
loginfo("Deleted local MainPayments.csv")
chan$send_message("Updated MainPayments.csv")
loginfo("Writing Grant Outcomes CSV locally...")
write.csv(GrantOutcomesOnly,"GrantOutcomes.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("GrantOutcomes.csv", "Raw/GrantOutcomes.csv")
loginfo("Deleting local file...")
unlink("GrantOutcomes.csv")
loginfo("Deleted local GrantOutcomes.csv")
chan$send_message("Updated GrantOutcomes.csv")
loginfo("Writing Grantee DEI CSV locally...")
write.csv(GranteeDEI,"GranteeDEI.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("GranteeDEI.csv", "Raw/GranteeDEI.csv")
loginfo("Deleting local file...")
unlink("GranteeDEI.csv")
loginfo("Deleted local GranteeDEI.csv")
chan$send_message("Updated GranteeDEI.csv")
loginfo("Writing AllContacts CSV locally...")
write.csv(MasterContacts,"AllContacts.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("AllContacts.csv", "Raw/AllContacts.csv")
loginfo("Deleting local file...")
unlink("AllContacts.csv")
loginfo("Deleted local AllContacts.csv")
chan$send_message("Updated AllContacts.csv")
loginfo("Writing Theme Budgets CSV locally...")
write.csv(ThemeBudgets,"ThemeBudgets.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("ThemeBudgets.csv", "Raw/ThemeBudgets.csv")
loginfo("Deleting local file...")
unlink("ThemeBudgets.csv")
loginfo("Deleted local ThemeBudgets.csv")
chan$send_message("Updated ThemeBudgets.csv")
loginfo("Writing Org Budgets CSV locally...")
write.csv(OrgBudgets,"OrgBudgets.csv", row.names = FALSE)
loginfo("Uploading to OneDrive...")
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/DataandReports")
docs <- site$get_drive("Documents")
docs$upload_file("OrgBudgets.csv", "Raw/OrgBudgets.csv")
loginfo("Deleting local file...")
unlink("OrgBudgets.csv")
loginfo("Deleted local OrgBudgets.csv")
chan$send_message("Updated OrgBudgets.csv")
chan$send_message("MainETL finished.")
loginfo("Deleting weeks old log files")
log_files <- file.info(list.files('logs', full.names=TRUE))
expired_log_date <- today() - 7
to_delete <- log_files[log_files$ctime < expired_log_date,]
unlink(rownames(to_delete))
loginfo("Old log files deleted.")
}
tryCatch(
expr = runMainETL(),
error = function(e){
team <- get_team("Data and Reports")
chan <- team$get_channel("General")
chan$send_message(e)
usr <- chan$get_member("Richard Carder")
chan$send_message("See above error", mentions=usr, content_type="html")
outlook <- get_business_outlook()
error_body <- str_glue("<p>Hey team,</p><p>There was an error in the MainETL run. See below:</p><p>{e}</p><p>Good luck,</p><p>Your Friendly Neighborhood Data Monitor")
recipient_vector <- c("kyle-consultant@wpfund.org", "rcarder@wpfund.org")
outlook$create_email(body=error_body,
content_type="html",
to=recipient_vector,
send_now=TRUE,
subject="An Error! has occurred in MainETL")
})
library(httpuv)
install.packages("httpuv")
if (grepl('kyle', Sys.getenv('R_USER'), fixed=TRUE)){
repo_slug <- "/WPF-Data-Scripts"
} else {
repo_slug <- "/dev/wpf/WPF-Data-Scripts"
}
path_to_repo <- paste0(Sys.getenv('R_USER'), repo_slug)
setwd(path_to_repo)
library(renv)
renv::activate(project = path_to_repo)
#renv::status()
renv::restore()
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(reshape)
library(stringr)
library(tidyr)
library(lubridate)
library(formattable)
library(Microsoft365R)
library(logging)
library(AzureKeyVault)
#library(httpuv)
library(DBI)
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
mround <- function(x,base){
base*round(x/base)
}
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Raw")
PaymentsMain<-read.csv("MainPayments.csv", stringsAsFactors = FALSE)
ED<-PaymentsMain%>%
filter(ComplianceStatus=="Equivalent Organization"|ComplianceStatus=="Expired ED"|ComplianceStatus=="ED requested - pending")%>%
filter(Status=="Approved"|Status=="Pending")%>%
filter(!is.na(ProjectEndDate))%>%
mutate(DaysUntilPayment=as.numeric(as.Date(ScheduleDate)-Sys.Date()),
ExpiresDate=as.character(as.Date(ExpiresDate)))%>%
arrange(DaysUntilPayment)%>%
group_by(OrganizationId,Name, ComplianceStatus,ExpiresDate,LastVerifiedDate)%>%
summarise(LastProjectEndDate=max(ProjectEndDate),
NextPayment=first(ScheduleDate[DaysUntilPayment>0]),
ActiveGrants=n_distinct(RequestId[ProjectEndDate>=Sys.Date()]),
ActiveAmount=sum(SplitPaymentAmount[ProjectEndDate>=Sys.Date()]))%>%
dplyr::rename("Status"=3,
"Expiration"=4,
"LastGrantEnd"=6,
"ActiveGrants"=8,
"ActiveAmount"=9)%>%
mutate(DaysUntilExpiration=as.Date(Expiration)-Sys.Date(),
Expires=ifelse(Status=="ED requested - pending","ED requested - pending",
ifelse(DaysUntilExpiration<=0|Status=="Expired ED","Expired",
ifelse(DaysUntilExpiration>0&DaysUntilExpiration<=61,"Expires in Less than 2 Months",
ifelse(DaysUntilExpiration>61&DaysUntilExpiration<=183,"Expires in Less than 6 Months","Current Certification")))),
DaysUntilExpiration=ifelse(is.na(DaysUntilExpiration),0,DaysUntilExpiration))
#list_teams()
list_sharepoint_sites()
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/ITTeam2/business_solutions")
site$get_lists()
lst <- site$get_list("GivingData ED Status")
list_items_raw<-lst$list_items()
list_items<-list_items_raw%>%
left_join(ED,by=c("OrgId"="OrganizationId"))
EDnew<-ED%>%
anti_join(list_items,by=c("OrganizationId"="OrgId"))
View(EDnew)
View(ED)
for (i in EDnew$OrganizationId){
p<-EDnew%>%
filter(OrganizationId==i)
item <- lst$create_item(OrgId=p$OrganizationId,
Title=p$Name,
Status=p$Status,
Expires=p$Expires,
ExpirationDate=p$Expiration,
ActiveGrants=p$ActiveGrants,
ActiveAmount=p$ActiveAmount,
LastGrantEnd=p$LastGrantEnd,
NextPayment=p$NextPayment)
}
##Write ED Status to Workflow Landing Page
if (grepl('kyle', Sys.getenv('R_USER'), fixed=TRUE)){
repo_slug <- "/WPF-Data-Scripts"
} else {
repo_slug <- "/dev/wpf/WPF-Data-Scripts"
}
path_to_repo <- paste0(Sys.getenv('R_USER'), repo_slug)
setwd(path_to_repo)
library(renv)
renv::activate(project = path_to_repo)
#renv::status()
renv::restore()
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(reshape)
library(stringr)
library(tidyr)
library(lubridate)
library(formattable)
library(Microsoft365R)
library(logging)
library(AzureKeyVault)
#library(httpuv)
library(DBI)
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
mround <- function(x,base){
base*round(x/base)
}
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Raw")
PaymentsMain<-read.csv("MainPayments.csv", stringsAsFactors = FALSE)
#GrantOutcomes<-read.csv("GrantOutcomes.csv", stringsAsFactors = FALSE)
#OutcomesMain<-read.csv("MainOutcomes.csv", stringsAsFactors = FALSE)
#GranteeDEI<-read.csv("GranteeDEI.csv", stringsAsFactors = FALSE)
#AllContacts<-read.csv("AllContacts.csv", stringsAsFactors = FALSE)
runMainETL <- function() {
##Select Full Tables (except for HasAttribs which is filtered by above to only the ones needed)
#sqlQuery_Alerts <- "SELECT * FROM Alerts"
#sqlQuery_Compliance <- "SELECT * FROM OrganizationComplianceStatuses"
#Alerts <- sqlQuery(myconn, sqlQuery_Alerts,stringsAsFactors=FALSE)
#Compliance <- sqlQuery(myconn, sqlQuery_Compliance,stringsAsFactors=FALSE)
ED<-PaymentsMain%>%
filter(ComplianceStatus=="Equivalent Organization"|ComplianceStatus=="Expired ED"|ComplianceStatus=="ED requested - pending")%>%
filter(Status=="Approved"|Status=="Pending")%>%
filter(!is.na(ProjectEndDate))%>%
mutate(DaysUntilPayment=as.numeric(as.Date(ScheduleDate)-Sys.Date()),
ExpiresDate=as.character(as.Date(ExpiresDate)))%>%
arrange(DaysUntilPayment)%>%
group_by(OrganizationId,Name, ComplianceStatus,ExpiresDate,LastVerifiedDate)%>%
summarise(LastProjectEndDate=max(ProjectEndDate),
NextPayment=first(ScheduleDate[DaysUntilPayment>0]),
ActiveGrants=n_distinct(RequestId[ProjectEndDate>=Sys.Date()]),
ActiveAmount=sum(SplitPaymentAmount[ProjectEndDate>=Sys.Date()]))%>%
dplyr::rename("Status"=3,
"Expiration"=4,
"LastGrantEnd"=6,
"ActiveGrants"=8,
"ActiveAmount"=9)%>%
mutate(DaysUntilExpiration=as.Date(Expiration)-Sys.Date(),
Expires=ifelse(Status=="ED requested - pending","ED requested - pending",
ifelse(DaysUntilExpiration<=0|Status=="Expired ED","Expired",
ifelse(DaysUntilExpiration>0&DaysUntilExpiration<=61,"Expires in Less than 2 Months",
ifelse(DaysUntilExpiration>61&DaysUntilExpiration<=183,"Expires in Less than 6 Months","Current Certification")))),
DaysUntilExpiration=ifelse(is.na(DaysUntilExpiration),0,DaysUntilExpiration))
#list_teams()
list_sharepoint_sites()
site <- get_sharepoint_site(site_url="https://wellspringadvisors.sharepoint.com/sites/ITTeam2/business_solutions")
site$get_lists()
lst <- site$get_list("GivingData ED Status")
list_items_raw<-lst$list_items()
list_items<-list_items_raw%>%
left_join(ED,by=c("OrgId"="OrganizationId"))
for (i in list_items$id){
item<-lst$get_item(i)
p<-list_items%>%
filter(id==i)
item$update(fields=list(OrgId=p$OrgId,
Title=p$Name,
Status=p$Status.y,
Expires=p$Expires.y,
ExpirationDate=p$Expiration,
ActiveGrants=p$ActiveGrants.y,
ActiveAmount=p$ActiveAmount.y,
LastGrantEnd=p$LastGrantEnd.y,
NextPayment=p$NextPayment.y))
}
##Create new items for any that are not in the list
EDnew<-ED%>%
anti_join(list_items,by=c("OrganizationId"="OrgId"))
for (i in EDnew$OrganizationId){
p<-EDnew%>%
filter(OrganizationId==i)
item <- lst$create_item(OrgId=p$OrganizationId,
Title=p$Name,
Status=p$Status,
Expires=p$Expires,
ExpirationDate=p$Expiration,
ActiveGrants=p$ActiveGrants,
ActiveAmount=p$ActiveAmount,
LastGrantEnd=p$LastGrantEnd,
NextPayment=p$NextPayment)
}
}
tryCatch(
expr = runMainETL(),
error = function(e){
team <- get_team("Data and Reports")
chan <- team$get_channel("General")
chan$send_message(e)
usr <- chan$get_member("Richard Carder")
chan$send_message("See above error", mentions=usr, content_type="html")
outlook <- get_business_outlook()
error_body <- str_glue("<p>Hey team,</p><p>There was an error in the Equivalency Determination update. See below:</p><p>{e}</p><p>Good luck,</p><p>Your Friendly Neighborhood Data Monitor")
recipient_vector <- c("kyle-consultant@wpfund.org", "rcarder@wpfund.org")
outlook$create_email(body=error_body,
content_type="html",
to=recipient_vector,
send_now=TRUE,
subject="An Error! has occurred in ReportGeneration")
})
---
title: "Gather Census Data for Durham Project"
author: "Rich Carder"
date: "February 27, 2020"
#---
library(tidycensus)
library(sf)
library(tidyverse)
library(jsonlite)
library(geojsonio)
library(hrbrthemes)
library(formattable)
library(scales)
library(ggrepel)
library(ggthemes)
##Change to your wd where repo is cloned to pull in any auxiliary data that may be useful
setwd("C:/Users/rcarder/Documents/dev/DurhamUpzoning/data/")
Sys.getenv("census_api_key")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "pl")
acs_variables<-load_variables(2020, "acs5")
Sys.getenv("census_api_key")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "pl")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
#install.packages("leaflet")
library(leaflet)
install.packages("leaflet")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
#install.packages("leaflet")
library(leaflet)
#install.packages("leaflet")
install/packages("htmlwisgets")
#install.packages("leaflet")
install.packages("htmlwisgets")
#install.packages("leaflet")
install.packages("htmlwidgets")
install.packages("leaflet")
library(leaflet)
library(htmlwidgets)
detach("package:formattable", unload = TRUE)
library(leaflet)
detach("package:htmlwidgets", unload = TRUE)
library(leaflet)
install.packages("htmlwidgets")
