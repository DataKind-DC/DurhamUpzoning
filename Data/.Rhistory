path_to_repo <- paste0(Sys.getenv('R_USER'),"/dev/wpf/WPF-Data-Scripts")
setwd(path_to_repo)
library(renv)
renv::activate(project = path_to_repo)
renv::restore()
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(reshape)
library(stringr)
library(tidyr)
library(lubridate)
library(formattable)
library(Microsoft365R)
library(logging)
library(AzureKeyVault)
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
## get lookup tables from WPF-Grantmaking-Data
vault <- key_vault(Sys.getenv("AZ_KEYVAULT_URL"))
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
## get lookup tables from WPF-Grantmaking-Data
vault <- key_vault(Sys.getenv("AZ_KEYVAULT_URL"))
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
loginfo("Connecting to the database...")
connection_tries <- 1
connect_to_spot_db <- function(vault_db_pw, tries){
tryCatch({
dbConnect(odbc::odbc(), Driver = "SQL Server",
Server = "wpfgrantmaking.database.windows.net",
Database = "WPF Grantmaking Data",
Uid = "wpfdataadmin",
Pwd = vault_db_pw$value,
Port = 1433)
}, error = function(cond){
loginfo("Backing off for two minutes...")
Sys.sleep(120)
tries = tries + 1
if (tries < 6){
loginfo(paste0("Trying again... attempt number ", tries))
connect_to_spot_db(vault_db_pw, tries)
} else {
stop("Max connection attempts reached.")
}
})
}
con <- connect_to_spot_db(sqlserver_pw, connection_tries)
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
## get lookup tables from WPF-Grantmaking-Data
vault <- key_vault(Sys.getenv("AZ_KEYVAULT_URL"))
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
## get lookup tables from WPF-Grantmaking-Data
vault <- key_vault(Sys.getenv("AZ_KEYVAULT_URL"))
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
loginfo("Connecting to the database...")
install.packages("httpuv")
renv:status()
renv::status()
library(httpuv)
#install.packages("httpuv")
renv::status()
options(scipen=999)  #Disables scientific notation
##Define helper functions
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
replace0 <- function(x) {
if_else(condition = is.na(x),
true = 0,
false = as.numeric(x))
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
## get lookup tables from WPF-Grantmaking-Data
vault <- key_vault(Sys.getenv("AZ_KEYVAULT_URL"))
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
sqlserver_pw <- vault$secrets$get('wpfgrantmakingadmin')
loginfo("Connecting to the database...")
connection_tries <- 1
connect_to_spot_db <- function(vault_db_pw, tries){
tryCatch({
dbConnect(odbc::odbc(), Driver = "SQL Server",
Server = "wpfgrantmaking.database.windows.net",
Database = "WPF Grantmaking Data",
Uid = "wpfdataadmin",
Pwd = vault_db_pw$value,
Port = 1433)
}, error = function(cond){
loginfo("Backing off for two minutes...")
Sys.sleep(120)
tries = tries + 1
if (tries < 6){
loginfo(paste0("Trying again... attempt number ", tries))
connect_to_spot_db(vault_db_pw, tries)
} else {
stop("Max connection attempts reached.")
}
})
}
con <- connect_to_spot_db(sqlserver_pw, connection_tries)
loginfo("Getting geo lookup...")
#remotes::install_github("tylermorganwall/rayshader")
#install.packages("gganimate")
#install.packages("taskscheduleR")
library(taskscheduleR)
# install.packages("magick")
library(magick)
library(gganimate)
library(qdap)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(DescTools)
library(devtools)
library(fitdistrplus)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(ggalluvial)
library(waffle)
library(directlabels)
library(urbnmapr)
library(statebins)
library(rworldmap)
library(tidyverse)
library(ggraph)
library(igraph)
library(viridis)
library(xlsx)
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Learning and Evaluation - Documents/2021")
outcomes2021raw<-read.xlsx("All Outcomes 2021.xlsx",1)
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Learning and Evaluation - Documents/2021/Grants Data Analysis System/Short Outcome Tables")
outcomes2021<-outcomes2021raw%>%
filter(Type=="Thematic"|Type=="EC in Thematic")%>%
mutate(ThemeId=paste(ShortProgram,"-", Budgeting.Theme),
OutcomeId=paste(ShortProgram,ShortTheme, OutcomeNum))
n_distinct(outcomes2021$ThemeId)
##Define Excel column styles
unique(outcomes2021$ThemeId)
##To explore fields available in the ACS
census_variables<-load_variables(2020, "sf1")
---
title: "Gather Census Data for Durham Project"
author: "Rich Carder"
date: "July 30, 2020"
#---
library(tidycensus)
library(sf)
library(tidyverse)
library(jsonlite)
library(geojsonio)
library(hrbrthemes)
library(formattable)
library(scales)
library(ggrepel)
library(ggthemes)
#This script extracts ACS 5-year estimates at the ZIP level group using the tidycensus package. To run tidycensus, you first need
#to set up a Census API key and run census_api_key(). Set working directory
#to where you want output files to save, or use the collect_acs_data function
#to set a different outpath.
#
---
title: "Gather Census Data for Durham Project"
author: "Rich Carder"
date: "July 30, 2020"
#---
library(tidycensus)
library(sf)
library(tidyverse)
library(jsonlite)
library(geojsonio)
library(hrbrthemes)
library(formattable)
library(scales)
library(ggrepel)
library(ggthemes)
#This script extracts ACS 5-year estimates at the ZIP level group using the tidycensus package. To run tidycensus, you first need
#to set up a Census API key and run census_api_key(). Set working directory
#to where you want output files to save, or use the collect_acs_data function
#to set a different outpath.
#
##Change to your wd where repo is cloned to pull in any auxiliary data that may be useful
setwd("C:/Users/rcarder/Documents/dev/DurhamUpzoning/data/")
cities<-read.csv("cities.csv") ##to help provide context to state maps
Sys.getenv("census_api_key")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "sf1")
library(tidycensus)
install.packages(c("dplyr", "formattable", "geojsonio", "ggrepel", "ggthemes", "hrbrthemes", "jsonlite", "scales", "sf", "tidycensus", "tidyverse"))
library(tidycensus)
library(sf)
library(tidyverse)
library(jsonlite)
library(geojsonio)
library(hrbrthemes)
library(formattable)
library(scales)
library(ggrepel)
library(ggthemes)
##Change to your wd where repo is cloned to pull in any auxiliary data that may be useful
setwd("C:/Users/rcarder/Documents/dev/DurhamUpzoning/data/")
cities<-read.csv("cities.csv") ##to help provide context to state maps
Sys.getenv("census_api_key")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "sf1")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "sf1")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "pl")
##To explore fields available in the ACS
census_variables<-load_variables(2020, "pl")
library(tidycensus)
##Change to your wd where repo is cloned to pull in any auxiliary data that may be useful
setwd("C:/Users/rcarder/Documents/dev/DurhamUpzoning/data/")
Sys.getenv("census_api_key")
##Geographic Level (county, state, tract, zcta (ZIP), block group, congressional district, public use microdata area)
geoLevel='block'  ##Zip Codes with approximate tabulation areas (ZIP codes are not actual polygons)
##Specific State? Leaving NULL will pull whole US. For anything more granular than census tracts, specify a state.
state="North Carolina"
county="Durham County"
##Also pull in geometry polygons for mapping? Takes much longer, so leave FALSE if just the data is needed.
pullGeography=TRUE
